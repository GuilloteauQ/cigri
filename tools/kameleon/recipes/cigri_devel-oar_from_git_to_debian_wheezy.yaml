# ### debian.yaml Kameleon recipe ###
# This recipe can be used to create any Debian appliance. It has been
# tested succesfully to generate etch, lenny and squeeze as of April 2010.
# The steps and variables beginning with "oar" can be activated to make
# a OAR client/server demo/test appliance.
# By default, it makes a tgz image and a qcow2 directly bootable into KVM.
#
global:
 #
 # Where Kameleon stores tmp files and appliances
 workdir_base: /var/tmp/kameleon
 # 
 # Debian specific
 distrib: debian
 debian_version_name: wheezy
 distrib_repository: http://ftp.fr.debian.org/debian/
 output_environment_file_system_type: ext4
 #
 # Architecture
 arch: amd64
 kernel_arch: "amd64"
 #
 # Extra packages to install on the minimal base system
 #extra_packages: "vim less bzip2 openssh-server rsync gnupg locales debian-keyring console-tools mingetty"
 # If you're building a OAR appliance, use this package list:
 extra_packages: "vim less bzip2 openssh-server rsync gnupg locales debian-keyring ruby libyaml-perl libjson-perl mysql-server mysql-client sudo libdbi-perl libdbd-mysql-perl taktuk oidentd console-tools mingetty curl git-core make python-docutils ocaml-findlib libmysql-ocaml libmysql-ocaml-dev apache2-mpm-prefork libjson-perl libwww-perl ntp libdbd-mysql-ruby libgd-ruby1.8 perl libdbi-perl libdbd-mysql-perl libtie-ixhash-perl libappconfig-perl libsort-naturally-perl libsort-versions-perl openjdk-6-jre libcgi-fast-perl librestclient-ruby librspec-ruby libjson-ruby subversion postgresql rubygems libdbd-pg-ruby libapache2-mod-passenger libapache2-mod-fastcgi libextlib-ocaml-dev libounit-ocaml-dev libpostgresql-ocaml-dev ruby-dev"
 #
 # Network configuration
 network_hostname: cigri
 # Following variables are used by the "network_config_static" step
 #network_eth0_ip: 129.88.70.251
 #network_eth0_mask: 255.255.255.248
 #network_gateway: 129.88.70.249
 #network_dns: 129.88.30.10
 #network_domain: imag.fr
 #
 # If you're building a Xen appliance, it may help:
 #xen_domu_modules: /lib/modules/2.6.32-4-xen-amd64
 # 
 # You can start with a "checkpoint_resume" step if you want
 # to start form a pre-built image. The image can be made
 # with the "checkpoint" step.
 checkpoint_file: /var/tmp/cigri_devel_checkpoint.tgz
 # 
 # OAR specific
 oar_git_repository: git://scm.gforge.inria.fr/oar/oar.git
 oar_git_treeish: "2.5"
 oar_git_directory: /home/kameleon/oar_install
 oar_prefix_install: /usr/local

 cigri_git: "git://scm.gforge.inria.fr/cigri/cigri.git master"
 cigri_install_dir: "/home/kameleon/cigri-3"
 
steps:
 - debian_check_deps
 - check_deps:
   - rsync
   - building_appliance
   - building_kvm_images
 - oar-2.5/oar_precheck
 - cigri/cigri_precheck
# - checkpoint_resume
 - bootstrap
 - system_config
# - network_config_static
 - root_passwd
 - mount_proc
 - mount_dev
 - software_install:
   - extra_packages
 - kernel_install
 - oar-2.5/target/debian/oar_debian_preinstall
 - oar-2.5/source/oar_git_install:
   - fetch_repository
   - node
   - server
   - frontend
 - checkpoint
 - oar-2.5/target/debian/oar_debian_config_server
 - oar-2.5/target/debian/oar_debian_config_frontend
 - oar-2.5/target/debian/oar_debian_config_node
 - oar-2.5/oar_config_node
 - oar-2.5/oar_config_server
 - oar-2.5/oar_config_frontend
 - oar-2.5/oar_config_system
 - oar-2.5/oar_config_devel
 - oar/oar_config_3clusters
 - oar-2.5/oar_clean
 - cigri/cigri_deps
 - cigri/cigri_checkout
 - cigri/cigri_init
# - kameleon/kameleon_debian_install
 - autologin
 - strip
# - xen_domu
# - oar/oar_build_tgz
 - build_appliance:
   - clean_udev
#   - save_as_tgz
   - create_raw_image
   - create_nbd_device
   - mkfs
   - mount_image
   - copy_system_tree
#   - grub_197_workaround
   - install_grub
   - umount_image
   - save_as_raw
#   - save_as_vmdk
#   - save_as_qcow2
#   - save_as_vdi
#   - save_as_iso
 - clean

