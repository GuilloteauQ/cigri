#==============================================================================
# vim_: softtabstop=2 shiftwidth=2 expandtab fenc=utf-8 cc=81 tw=80
#==============================================================================
#
# RECIPE: oar-devel
#
# DESCRIPTION: This recipe build a base debian wheezy appliance.
#
# TEMPLATE: debian-wheezy-base
#
# WARNING: autologin means anyone booting this image get acces WITHOUT password
#
#==============================================================================

---
# Loads some helpful aliases
aliases: defaults.yaml
# Enables qcow2 checkpoint
checkpoint: qcow2.yaml
#== Global variables use by Kameleon engine and the steps
global:
  ## User varibales : used by the recipe
  cachedir: /var/cache/kameleon
  rootfs: $$kameleon_cwd/rootfs
  user_name: kameleon
  arch: amd64

  nbd_device: /dev/nbd10
  container: "$${kameleon_recipe_name}_temp.qcow2"

  distrib: debian
  release: wheezy

  ## System variables. Required by kameleon engine
  # Include specific steps
  include_steps: [$$distrib/$$release, $$distrib, oar, $${distrib}_oar, cigri]

  ## OAR
  #
  oar_git_directory: "/home/kameleon/oar" 
  oar_git_repository: "git://scm.gforge.inria.fr/oar/oar.git"
  oar_git_treeish: "2.5"
  oar_prefix_install: "/usr/local"

  ## CIGRI
  #
  cigri_git: "git://scm.gforge.inria.fr/cigri/cigri.git master"
  cigri_install_dir: "/home/kameleon/cigri-3"

  # Shell session from where we launch exec_out commands. There is often a
  # local bash session, but it can be a remote shell on other machines or on
  # any shell. (eg. bash, chroot, fakechroot, ssh, tmux, lxc...)
  out_context:
    cmd: bash
    workdir: $$kameleon_cwd

  # Shell session that allows us to connect to the building machine in order to
  # configure it and setup additional programs
  default_env: "USER=root HOME=/root PATH=/usr/bin:/usr/sbin:/bin:/sbin LC_ALL=POSIX"
  in_context:
    cmd: env -i $$default_env chroot $$rootfs bash
    workdir: /

#== Bootstrap the new system and create the 'in_context'
bootstrap:
  - oar_precheck
  - prepare_appliance_with_nbd:
    - mountdir: $$rootfs
    - image_size: 2G
    - filesystem_type: ext4
  - debootstrap:
    - rootfs: $$rootfs
    - release: $$release
    - arch: $$arch
    - repository: http://ftp.fr.debian.org/debian/
    - archive_file: $$cachedir/$$distrib/$$release/$$arch/debootstrap.tar.gz
  - start_chroot:
    - rootfs: $$rootfs


#== Install and configuration steps
# WARNING: this part should be independante from the build context (whenever
# possible...)
setup:
  # Install
  - software_install:
    - packages: "debian-keyring ntp zip unzip rsync sudo less vim bash-completion extlinux"
  - kernel_install:
    - arch: $$arch
  # Configuration
  - system_config:
    - locales: C
    - lang: C
    - timezone: Europe/Paris
    - network_hostname: cigri
  - keyboard_config:
    - layout: "fr,us"
  - network_config
  - create_user:
    - name: $$user_name
    - group: admin
    - password: $$user_name
  - oar_prereq_install:
    - packages: "vim less bzip2 openssh-server rsync gnupg locales debian-keyring ruby libyaml-perl libjson-perl libdbi-perl taktuk oidentd console-tools mingetty curl git-core make python-docutils apache2-mpm-prefork libjson-perl libwww-perl ntp libgd-ruby1.8 perl libdbi-perl libtie-ixhash-perl libappconfig-perl libsort-naturally-perl libsort-versions-perl openjdk-6-jre libcgi-fast-perl libpostgresql-ocaml libpostgresql-ocaml-dev ocaml-findlib ocaml-nox libounit-ocaml-dev ruby-rest-client ruby-rspec postgresql libdbd-pg-ruby libpostgresql-ocaml-dev libdbd-pg-ruby libmysql-ocaml-dev libdbd-pg-perl libapache2-mod-fastcgi"
  - oar_devel_prereq_install:
    - packages: "sshfs git ruby-dev libapache2-mod-passenger rubygems"
  - oar_git_install
  - oar_debian_config_server
  - oar_debian_config_frontend
  - oar_debian_config_node
  - oar_config_node
  - oar_config_server
  - oar_config_frontend
  - oar_config_system
  - oar_config_devel
  - oar_clean
  - cigri_prereq
  - cigri_checkout
  - oar_config_3clusters
  - cigri_init
  - autologin

#== Export the generated appliance in the format of your choice
export:
  - save_appliance_from_nbd:
    - filename: "$${distrib}-$${release}"
    - save_as_qcow2
    # - save_as_tgz
    # - save_as_raw
    # - save_as_vmdk
    # - save_as_vdi
