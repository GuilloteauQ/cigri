#!/usr/bin/ruby -w
#
# This library contains the methods for the cigri-api clients (gridsub, gridstat,...)
#

require 'cigri-logger'
require 'cigri-conflib'
require 'net/http'
require 'uri'

ENV['CIGRICONFFILE']="%%CIGRICONFDIR%%/api-clients.conf"
CONF = Cigri::Conf.new()
CIGRICLIENTLOGGER = Cigri::Logger.new('CLIENT', CONF.get('LOG_FILE'))

module Cigri

  class Client
    attr_accessor :http
    attr_reader :base
 
    def initialize()
      @http = Net::HTTP.new(CONF.get('API_HOST'), CONF.get('API_PORT'))
      @http.read_timeout = CONF.get('API_TIMEOUT').to_i if CONF.exists?('API_TIMEOUT')
      if CONF.exists?('API_BASE')
        @base = CONF.get('API_BASE')
      else
        @base = ''
      end
    end

    def get(url)
      url=@base+url 
      @http.request(Net::HTTP::Get.new(url))
    end

    def post(url,data,header)
      url=@base+url 
      @http.post(url,data,header)
    end

    def delete(url)
      url=@base+url 
      @http.request(Net::HTTP::Delete.new(url))
    end

    # Print formated events to console
    def self.print_events(events)
      if events.nil?
        puts "No events!"
      else
        events.each do |event|
          job=''
          job=" of job #{event['job_id']}" if event['job_id']
          because=''
          because=" because of #{event['parent']}" if event['parent']
          puts "------------------------------------------------------------------------------"
          puts "#{event['id']}: #{event['code']}#{job} at #{event['date_open']} on #{event['cluster_name']}#{because}"
          puts event['message'] if !event['message'].nil?
        end
        puts "------------------------------------------------------------------------------"
      end
    end

  end # class Client    

end # module Cigri


